{"name": "test_business_workflow[case2]", "status": "broken", "statusDetails": {"message": "TypeError: 'bool' object is not subscriptable", "trace": "case = {'case_details': 'go to the specific product prage ', 'database_assertion': None, 'expected_result': None, 'pre_sql': None, ...}\n\n    @pytest.mark.parametrize('case',case_all)\n    # @pytest.mark.parametrize('case',case_all,ids=[f\"case_{i}\" for i in range(len(case_all))])\n    def test_business_workflow(case):\n>       resp=requests_api(case)\n\ntestcases/test_03_busniess_workflow.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/handle_request_api.py:105: in requests_api\n    data_extraction(response_data,response_extraction_in_excel)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi_response = {'error': 'Bad Request', 'message': '', 'path': '/prod/prodInfo', 'status': 400, ...}\nresponse_extraction_in_excel = {'skuId': '$..skuId'}\n\n    def data_extraction(api_response,response_extraction_in_excel):\n        if response_extraction_in_excel is None:\n            logger.info('no data extraction')\n            return # this return terminates this function at this point, none of the subsequent code is executed\n        #\n        # logger.info('-------data extraction start--------')\n        # # check if api_response is a requests.Response,try to convert it to Json\n        # if isinstance(api_response, requests.Response):\n        #     try:\n        #         api_response = api_response.json()  # Convert response to JSON if it's a Response object\n        #         logger.info(f'api response is {api_response}')\n        #     except requests.JSONDecodeError as e :\n        #         logger.error(\"Failed to parse response as JSON\")\n        #         return None  # Handle the error appropriately\n        # # Check if api_response is a string, attempt to parse it as JSON\n        # if isinstance(api_response, str):\n        #     try:\n        #         api_response = json.loads(api_response)\n        #     except json.JSONDecodeError as e:\n        #         logger.error(f\"Response is not a valid JSON string:{e}\")\n        #         return\n        # # If the response is still not a dict at this point, log an error\n        # if not isinstance (api_response,dict):\n        #     logger.error('API response is not a valid dictionary or JSON')\n        #     return\n        #\n        # # response_extraction_in_excel = what is written in the excel sheet\n        # # Parse response_extraction if it is a string (assumed to be in JSON format)\n        try:\n            response_extraction_in_excel = json.loads(response_extraction_in_excel)\n            logger.info(f'data has been extracted from excelsheet is {response_extraction_in_excel}')\n        except json.JSONDecodeError as e:\n            logger.error(f\"Failed to parse response_extraction as JSON: {e}\")\n            return\n    \n        if isinstance(response_extraction_in_excel, dict):\n          # Iterate over the key-value pairs in the dictionary\n            for key,value in response_extraction_in_excel.items():\n                value_to_save=None\n                if value.startswith('$'):\n                    # extract teh value from api_response using jsonpath\n>                   value_to_save=jsonpath(api_response, value)[0]\nE                   TypeError: 'bool' object is not subscriptable\n\ntools/handle_extraction.py:49: TypeError"}, "attachments": [{"name": "stderr", "source": "9da28407-fbaf-4855-999d-349845239d15-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'test_case': 3, 'case_details': 'go to the specific product prage ', 'request_method': 'get', 'url': 'http://shop.lemonban.com:8107/prod/prodInfo', 'request_header': None, 'request_parameter': '{\"prodId\":\"#prodId#\"}', 'expected_result': None, 'response_extraction': '{\"skuId\":\"$..skuId\"}', 'database_assertion': None, 'pre_sql': None}"}], "start": 1727472727453, "stop": 1727472728374, "uuid": "26e7bb82-647b-44db-8077-0ce9e333f949", "historyId": "3e3abfcb40910071d007a524bab772b7", "testCaseId": "85cfe4ef63c4e93ab4f966bbc596bd00", "fullName": "testcases.test_03_busniess_workflow#test_business_workflow", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_03_busniess_workflow"}, {"name": "host", "value": "Xinyangs-iMac.broadband"}, {"name": "thread", "value": "58323-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_03_busniess_workflow"}]}