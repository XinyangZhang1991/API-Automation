{"name": "test_register_case[case1]", "status": "broken", "statusDetails": {"message": "AttributeError: 'str' object has no attribute 'text'", "trace": "case = {'case_details': 'press next step to verify registration SMS verification code', 'database_assertion': None, 'expected...elect mobile_code  from tz_sms_log where user_phone=\\'#gen_unregister_phone#\\' order by rec_date desc limit 1;\"}', ...}\n\n    @pytest.mark.parametrize('case',case_all)\n    def test_register_case(case):\n>       resp=requests_api(case)\n\ntestcases/test_02_register.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntools/handle_request_api.py:105: in requests_api\n    data_extraction(response_data,response_extraction_in_excel)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi_response = 'd14d893f8e4b4d0bb5b2470dfbe50053'\nresponse_extraction_in_excel = {'check_code': 'text'}\n\n    def data_extraction(api_response,response_extraction_in_excel):\n        if response_extraction_in_excel is None:\n            logger.info('no data extraction')\n            return # this return terminates this function at this point, none of the subsequent code is executed\n        #\n        # logger.info('-------data extraction start--------')\n        # # check if api_response is a requests.Response,try to convert it to Json\n        # if isinstance(api_response, requests.Response):\n        #     try:\n        #         api_response = api_response.json()  # Convert response to JSON if it's a Response object\n        #         logger.info(f'api response is {api_response}')\n        #     except requests.JSONDecodeError as e :\n        #         logger.error(\"Failed to parse response as JSON\")\n        #         return None  # Handle the error appropriately\n        # # Check if api_response is a string, attempt to parse it as JSON\n        # if isinstance(api_response, str):\n        #     try:\n        #         api_response = json.loads(api_response)\n        #     except json.JSONDecodeError as e:\n        #         logger.error(f\"Response is not a valid JSON string:{e}\")\n        #         return\n        # # If the response is still not a dict at this point, log an error\n        # if not isinstance (api_response,dict):\n        #     logger.error('API response is not a valid dictionary or JSON')\n        #     return\n        #\n        # # response_extraction_in_excel = what is written in the excel sheet\n        # # Parse response_extraction if it is a string (assumed to be in JSON format)\n        try:\n            response_extraction_in_excel = json.loads(response_extraction_in_excel)\n            logger.info(f'data has been extracted from excelsheet is {response_extraction_in_excel}')\n        except json.JSONDecodeError as e:\n            logger.error(f\"Failed to parse response_extraction as JSON: {e}\")\n            return\n    \n        if isinstance(response_extraction_in_excel, dict):\n          # Iterate over the key-value pairs in the dictionary\n            for key,value in response_extraction_in_excel.items():\n                value_to_save=None\n                if value.startswith('$'):\n                    # extract teh value from api_response using jsonpath\n                    value_to_save=jsonpath(api_response, value)[0]\n                    logger.info(f'data found from API response is {value_to_save}')\n                elif value=='text':\n>                   value_to_save = api_response.text #In Python, when dealing with HTTP responses, you can use the .text attribute to get the response body as a string.\nE                   AttributeError: 'str' object has no attribute 'text'\n\ntools/handle_extraction.py:52: AttributeError"}, "attachments": [{"name": "stdout", "source": "6435cca7-a34f-4e97-a3fb-189842edac22-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "fd353c6d-6376-4a5a-b744-e2263f3c7514-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'test_case': 2, 'case_details': 'press next step to verify registration SMS verification code', 'request_method': 'PUT', 'url': 'http://shop.lemonban.com:8107/user/checkRegisterSms', 'request_header': '{\"Content-Type\": \"application/json; charset=UTF-8\"}', 'request_parameter': '{\"mobile\":\"#gen_unregister_phone#\",\"validCode\":\"#mobile_code#\"}', 'expected_result': None, 'response_extraction': '{\"check_code\":\"text\"}', 'pre_sql': '{\"mobile_code\":\\n\"select mobile_code  from tz_sms_log where user_phone=\\'#gen_unregister_phone#\\' order by rec_date desc limit 1;\"}', 'database_assertion': None}"}], "start": 1727472715269, "stop": 1727472719246, "uuid": "a6e3993b-c7ab-463b-a725-6baee5c7dd5f", "historyId": "ae5e1a93c398ec013f50db93b018072f", "testCaseId": "38a3319008702ede74631becebc3a04f", "fullName": "testcases.test_02_register#test_register_case", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_02_register"}, {"name": "host", "value": "Xinyangs-iMac.broadband"}, {"name": "thread", "value": "58323-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_02_register"}]}